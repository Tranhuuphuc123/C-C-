Hàm và thủ tục là các chương trình con, vậy chương trình con bao rộng ra của hàm và thủ tục là gì?

>>> KHÁI NIỀM CHƯƠNG TRÌNH CON:

 - k/n: Chương trình chính để dễ quản lý sẽ chia ra nhiều chương trình con và để gọi nó lên thì chỉ cần khai báo qua các tham số khác nhau:
      + Chương trình con là một chương trình có tên có đầu vào và ra
      + Có chức năng giải quyết các vấn đề chuyên biệt cho chương trình chính
      + Được gọi nhiều lần với các tham số khác nhau\
      + Mục đích sử dụng chính:
        ++ Tái sử dụng: các chương trình con này được sử dụng rộng rãi mọi nơi nhưng giá trị vẫn không đổi khác ở chỗ là
        sẽ được gội lại tái sử dụng lại với các tham số khác nhau mà thui.
        ++ Chia để trị: chia từ chương trình lớn thành các chương trình con để dễ quản lí khi cần thì kết hợp lại.
----> việc tạo ra các chương trình con sẽ dễ hiểu dễ quản lý và dễ phát hiện lỗi và sữa lỗi hơn.

>> CÓ HAI LOẠI CHƯƠNG TRÌNH CON: LÀ HÀM (FUNCTION) VÀ THỦ TỤC( thủ tục trong C không được quy định)
  > HÀM(FUNCTION):
    -Cấu trúc của một hàm:


            return_type function_name(parameter list) {

                // body of the function
                return <giá trị trả về>  // nếu Return_type là kiểu Void thì không cần return.

            }


            + trong đó:
             ++ Return_type: kiểu dữ liệu trả về: int, char, double,  long.... or kiểu không có giá trị Void().
             ++ Function_name: tên gọi của hàm do người dùng đặt.
             ++( Parameter list): Một tham số giống như một trình giữ chỗ. Khi một hàm được gọi, bạn chuyển một giá trị cho tham số đó.
             ++ Body_function: Phần thân hàm chứa một tập hợp các câu lệnh xác định chức năng của hàm.

             ++ ví dụ: 
                    // hàm tra ve kieu int
                    int Tong( int x, int y){
                        return a+b;           // lệnh return trả về giá trị a, b                                       
                    }
                    
                    // goi vao chuong trinh chinh
                   int main(){
                        int a, b;            // a, và b là gia trị nhập từ ct chính và sẽ đc gán cho chuong trình con hàm Tong( x= a, y=b).
                        printf("nhap vao gia tri a: ");
                        scanf("%d", &a);
                        printf("nhap vao gia tri b: ");
                        scanf("%d", &b);

                        // lệnh gọi và truyền hàm tong vao chương trình chính
                        int sum = Tong(a,b);

                        printf("%d", sum);
                        return 0; 
                   }

              
          > Phạm vi biến (Scope): biến cục bộ và toàn cục--> đi sâu sau

                  vd:
                  #include<stdio.h>
                    int i; // bien toàn cục khai báo trc hàm main() và có giá trị dùng chung cho tất cả cũng được gọi la prototype hàm nguyên mẫu
                    int main()
                    {

                    }
                    void thi_du(){
                      int a =3; // biến cục bộ khai báo sau hàm main và có giá trị riêng và dễ dàng thay đổi sữa lỗi khi cần.
                    }



          > Truyền tham số cho Hàm:
             ***>> Luu Y: 
             PHÂN BIỆT TRUYỀN THAM CHIẾU VÀ TRUYỀN THAM TRỊ

            TRUYỀN THAM CHIẾU là truyền địa chỉ ô nhớ của biến, do đó khi thay đổi giá trị của biến bên trong phương thức thì giá trị của biến 
            cũng bị thay đổi bên ngoài phương thức.

            ----> Ghi nhớ → GIÁ TRỊ BIẾN SẼ BỊ THAY ĐỔI BÊN NGOÀI HÀM (KHI KẾT THÚC)

            ------------

            TRUYỀN THAM TRỊ là truyền giá trị của biến (không phải là địa chỉ ô nhớ), khi đó phương thức sẽ tự động tạo ra một địa chỉ ô nhớ
             mới để lưu trữ giá trị này, do đó nó chỉ được thay đổi trong phương thức hiện hành và giá trị của biến không bị thay đổi bên ngoài 
             phương thức hiện hành.

            --------->Ghi nhớ → GIÁ TRỊ BIẾN KHÔNG BỊ THAY ĐỔI  BÊN NGOÀI HÀM  (KHI KẾT THÚC)


    ++ ví dụ:
      
        #include<stdio.h>
        /* prototype*/
        void hoanVi_1(int a, int b);
        void hoanVi_2(int *a, int *b);



        int main(){
            int a, b;

            printf("\n enter the num a: ");
            scanf("%d", &a);
            printf("\n enter the num b: ");
            scanf("%d", &b);

            printf("------------------\n");

            printf("\n gia tri ban dau: a = %d va b = %d",a,b);

            // truyền tham trị
            hoanVi_1(a, b);
            printf("\n tham tri: a = %d va b = %d",a, b);    


            // truyền tham chiếu với con trỏ
            hoanVi_2(&a, &b);
            // khai báo &a &b: khai báo tên địa chỉ bố nhớ là a và b có chứa giá trị a và b.
            printf("\n tham chieu: a = %d va b = %d",a,b);
            
          
        }

        /*ham con*/
        void hoanVi_1(int a, int b){
            int temp=a;
            a=b;
            b=temp;
        }


        void hoanVi_2(int *a, int *b){
            int temp = *a;
            *a = *b;
            *b = temp;

            // *a, *b, *c: chính là giá trị được lưu trong bộ nhớ có địa chỉ tên a, b , c
        }

            

  >>> hàm đệ qui trong C là quá trình trong đó một phương thức gọi lại chính nó một cách liên tiếp. Một phương thức trong C gọi lại chính
   nó được gọi là phương thức đệ quy.
             
             cấu trúc:
                  kieu_tra_ve hamdequi() {

                          hamdequi();  /* goi lai chinh no */

                    }

                    
                    /* xuất hàm đệ qui ra hàm main */
                    int main() {

                        hamdequi();

                    }
      ---->> lưu ý trong hàm đệ qui luôn phải có điều kiện kết thúc hàm đệ qui-- > cái này rèn luyện lấy kinh nghiệm








